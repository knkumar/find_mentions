#L645 Final Project
#Nov 28 2011
#2 things - separate out verb coreference and noun phrases with coreference
#this file - noun phrases with corteference
"""['concern climbing
Everest has become too common , and perhaps abit too commercial
','(NP*(SBAR(S(S(VP*(NP*)))(VP*(VP*(ADJP(ADJP**)**(ADVP*)(ADJP(ADVP(NP**)*)*))))))))',10]"""
import re
import pickle

class mention_frame:
   def __init__(self, number, sent, pos, bracket, nps_finder):
      self.sent_number = number
      self.sent = sent
      self.pos_tags = pos
      self.bracket = bracket
      self.nps = nps_finder

   def get_nps(self):
      ret_np = {}
      def insert_nps(key, val):
         ret_np[key] = val
      map(lambda key: insert_nps(key,map(lambda x,y,z: [x,x+y,z], self.nps[key][0],self.nps[key][1],self.nps[key][2])), self.nps.keys())
      return ret_np

   def get_sent(self,start,end):
      return ' '.join(self.sent[start:end])

   def get_sent_full(self):
      return ' '.join(self.sent)


def find_nice_features(sent_dict):
   pos_cluster = []
   neg_cluster = []
   for key in sent_dict.keys():
      nps = sent_dict[key].nps
      coref = max(nps.keys())
      coref_spans = []
      print nps[coref], coref
      print
      def insert_spans(span):
         coref_spans.append(span)
      if not nps[coref]:
         map(lambda x: insert_spans('%s|%s'%(x[0],x[1])) if not x else None, nps[coref])
      for npkey in nps.keys():
         for np in nps[npkey]:
            if not np:
               continue
            if npkey != coref:
               if '%s|%s'%(np[0],np[1]) in coref_spans:
                  pos_cluster.append('%s'%(''.join(np[2])))
               else:
                  neg_cluster.append('%s'%(''.join(np[2])))
            else:
               neg_cluster.append('%s'%(''.join(np[2])))
   return pos_cluster, neg_cluster

def copy_back(cluster, fname):
   f = open(fname, 'w')
   for item in cluster:
      f.write('%s\n'%item)
   f.close()
          
def main():
   #"""
   sent_out = open("sent_dict.pkl","rb")
   sent_dict = pickle.load(sent_out)
   print sent_dict[sent_dict.keys()[100]].nps
   pos,neg = find_nice_features(sent_dict)
   copy_back(pos,'pos.txt')
   copy_back(neg,'neg.txt')

if __name__ == "__main__":
   main()
